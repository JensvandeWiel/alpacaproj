package stores

import (
	"{{.packageName}}/repository"
	"context"
	"database/sql"
	"errors"
	"github.com/jmoiron/sqlx"
)

var (
	ErrorUserNotFound = errors.New("user not found")
	ErrorInvalidUser  = errors.New("invalid user")
)

type UserStore interface {
	GetUserById(ctx context.Context, id int32) (*repository.User, error)
	GetUserByEmail(ctx context.Context, email string) (*repository.User, error)
	CreateUser(ctx context.Context, user *repository.User) (int64, error)
	DeleteUser(ctx context.Context, id int32) error
}

type DatabaseUserStore struct {
	queries *repository.Queries
}

func NewDatabaseUserStore(db *sqlx.DB) UserStore {
	return &DatabaseUserStore{
		queries: repository.New(db),
	}
}

func (d *DatabaseUserStore) GetUserById(ctx context.Context, id int32) (*repository.User, error) {
	user, err := d.queries.GetUser(ctx, id)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, ErrorUserNotFound
		}
		return nil, err
	}

	return user, nil
}

func (d *DatabaseUserStore) GetUserByEmail(ctx context.Context, email string) (*repository.User, error) {
	user, err := d.queries.GetUserByEmail(ctx, email)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, ErrorUserNotFound
		}
		return nil, err
	}

	return user, nil
}

func (d *DatabaseUserStore) CreateUser(ctx context.Context, user *repository.User) (int64, error) {
	if user == nil {
		return 0, ErrorInvalidUser
	}
	if user.Email == "" || user.Name == "" || user.Password == "" {
		return 0, ErrorInvalidUser
	}
	return d.queries.CreateUser(ctx, repository.CreateUserParams{
		Email:    user.Email,
		Name:     user.Name,
		Password: user.Password,
	})
}

func (d *DatabaseUserStore) DeleteUser(ctx context.Context, id int32) error {
	res, err := d.queries.DeleteUser(ctx, id)
	if err != nil {
		return err
	}

	rowsAffected, err := res.RowsAffected()
	if err != nil {
		return err
	}

	if rowsAffected == 0 {
		return ErrorUserNotFound
	}

	return nil
}
